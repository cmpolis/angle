// Generated by CoffeeScript 1.6.3
(function() {
  var Angle,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Angle = {};

  Angle.Style = (function() {
    function Style() {
      this.color = __bind(this.color, this);
    }

    Style.prototype.palette = ["#5B5874", "#82D148", "#CF513A", "#C059CC", "#517240", "#D0B44D", "#80BEC7", "#BA4A7E", "#8AD59B", "#CFA8A9", "#86573A", "#7C7DCB"];

    Style.prototype.color = function(ndx) {
      if (ndx == null) {
        ndx = Math.floor(Math.random() * this.palette.length);
      }
      if (ndx < palette.length) {
        this.palette[ndx];
      } else if (ndx < palette.length * 2) {
        d3.rgb(this.palette[ndx % palette.length]).brighter();
      } else if (ndx < palette.length * 2) {
        d3.rgb(this.palette[ndx % palette.length]).darker();
      }
      return this.color(ndx % (this.palette.length * 3));
    };

    return Style;

  })();

  puts('/util dir');

  Angle.ChartBase = (function() {
    ChartBase.prototype.padding = {
      top: 40,
      right: 40,
      bottom: 40,
      left: 40
    };

    ChartBase.prototype.height = 600;

    ChartBase.prototype.width = 600;

    /*
    */


    function ChartBase(options) {
      var elHeight, elWidth;
      if (options == null) {
        options = {};
      }
      this.render = __bind(this.render, this);
      this.yAxis = __bind(this.yAxis, this);
      this.xAxis = __bind(this.xAxis, this);
      this.fetch = __bind(this.fetch, this);
      this.fetchOrRender = __bind(this.fetchOrRender, this);
      if (!(options.el && (this.el = d3.select(options.el)[0]))) {
        throw "DOM Element not found, pass in a valid selector as `el`";
      }
      this.svg = this.el.append('svg');
      if (Angle.settings.padding != null) {
        _.extend(this.padding, Angle.settings.padding);
      }
      if (options.padding != null) {
        _.extend(this.padding, options);
      }
      if (options.height) {
        this.height = options.height;
      } else if ((elHeight = parseInt(d3.select('#ohlc').style('height'))) > 0) {
        this.height = elHeight;
      } else if (Angle.settings.height) {
        this.height = Angle.settings.height;
      }
      if (options.width) {
        this.width = options.height;
      } else if ((elWidth = parseInt(d3.select('#ohlc').style('width'))) > 0) {
        this.width = elWidth;
      } else if (Angle.settings.width) {
        this.width = Angle.settings.height;
      }
      if (this.initialize != null) {
        this.initialize(options);
      }
      this.fetchOrRender(options.data);
    }

    /*
    */


    ChartBase.prototype.fetchOrRender = function(data) {
      if (typeof data === 'object') {
        this.data = data;
        return this.render();
      } else if (typeof data === 'string') {
        return this.fetch(data, function() {
          return this.render();
        });
      }
    };

    /*
    */


    ChartBase.prototype.fetch = function(url, next) {
      var extension;
      this.dataUrl = data;
      extension = this.dataUrl.match(/\.[0-9a-z]+$/i)[0].toLowerCase();
      if (!_.contains("text json xml csv tsv".split(' '), extension)) {
        throw "Data url has invalid extension: " + extension;
      }
      return d3[extension](this.dataUrl, function(error, data) {
        if (error != null) {
          throw error;
        }
        this.data = data;
        if (this.afterFetch != null) {
          this.afterFetch();
        }
        if (this.next != null) {
          return this.next();
        }
      });
    };

    /*
    */


    ChartBase.prototype.xAxis = function(options) {
      if (options == null) {
        options = {};
      }
      options = _.extend(options, {
        orientation: 'bottom',
        scale: this.xScale,
        ticks: 10
      });
      return d3.svg.axis.scale(options.scale.ticks(options.ticks.orient(options.orientation)));
    };

    ChartBase.prototype.yAxis = function(options) {
      if (options == null) {
        options = {};
      }
      options = _.extend(options, {
        orientation: 'left',
        scale: this.yScale,
        ticks: 10
      });
      return d3.svg.axis.scale(options.scale.ticks(options.ticks.orient(options.orientation)));
    };

    /*
    */


    ChartBase.prototype.render = function() {
      throw "render() not implemented";
    };

    return ChartBase;

  })();

  Angle.BarChart = (function() {
    /*
    */

    function BarChart() {}

    return BarChart;

  })();

  Angle.LineChart = (function() {
    function LineChart() {}

    /*
    */


    LineChart.prototype.interpolate = 'linear';

    LineChart.prototype.xAccess = function(d) {
      return d[0];
    };

    LineChart.prototype.yAccess = function(d) {
      return d[1];
    };

    /*
    */


    LineChart.prototype.initialize = function(options) {
      var property, _i, _len, _ref, _results;
      console.log('init line chart');
      _ref = ['interpolate', 'yAccessor', 'xAccessor', 'transform'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        property = _ref[_i];
        if (options[property] != null) {
          _results.push(this[property] = options[property]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    /*
    */


    LineChart.prototype.afterFetch = function() {
      if (this.transform != null) {
        this.transform();
      }
      if (this.xAccess(this.data[0]) instanceof Date) {
        this.xScale = d3.time.scale().range([0, this.width].domain(d3.extent(this.data, this.xAccessor)));
      } else {
        this.xScale = d3.scale.linear().range([0, this.width].domain(d3.extent(this.data, this.xAccessor)));
      }
      this.yScale = d3.scale.liner().range([this.height, 0].domain(d3.extent(this.data, this.yAccessor)));
      return this.line = d3.svg.line().interpolate(this.interpolate.x(this.xAccessor.y(this.yAccessor)));
    };

    /*
    */


    LineChart.prototype.render = function() {
      this.svg.append('g'.attr('class', 'x axis'.call(xAxis())));
      this.svg.append('g'.attr('class', 'y axis'.call(yAxis())));
      return this.svg.append('path'.attr('d', this.line(this.data)));
    };

    return LineChart;

  })();

  Angle.OHLCChart = (function() {
    /*
    */

    function OHLCChart() {}

    return OHLCChart;

  })();

}).call(this);
